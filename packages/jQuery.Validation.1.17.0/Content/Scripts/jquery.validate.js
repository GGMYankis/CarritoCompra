/*!
 * jQuery Validation Plugin v1.17.0
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2017 JÃ¶rn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory( require( "jquery" ) );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend( $.fn, {

	// https://jqueryvalidation.org/validate/
	validate: function( options ) {

		// If nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// Check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.on( "click.validate", ":submit", function( event ) {

				// Track the used submit button to properly handle scripted
				// submits later.
				validator.submitButton = event.currentTarget;

				// Allow suppressing validation by adding a cancel class to the submit button
				if ( $( this ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( this ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			} );

			// Validate the form on submit
			this.on( "submit.validate", function( event ) {
				if ( validator.settings.debug ) {

					// Prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden, result;

					// Insert a hidden input as a replacement for the missing submit button
					// The hidden input is inserted in two cases:
					//   - A user defined a `submitHandler`
					//   - There was a pending request due to `remote` method and `stopRequest()`
					//     was called to submit the form in case it's valid
					if ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {
						hidden = $( "<input type='hidden'/>" )
							.attr( "name", validator.submitButton.name )
							.val( $( validator.submitButton ).val() )
							.appendTo( validator.currentForm );
					}

					if ( validator.settings.submitHandler ) {
						result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( hidden ) {

							// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if ( result !== undefined ) {
							return result;
						}
						return false;
					}
					return true;
				}

				// Prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			} );
		}

		return validator;
	},

	// https://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator, errorList;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			errorList = [];
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
				if ( !valid ) {
					errorList = errorList.concat( validator.errorList );
				}
			} );
			validator.errorList = errorList;
		}
		return valid;
	},

	// https://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;

		// If nothing is selected, return empty object; can't chain anyway
		if ( element == null ) {
			return;
		}

		if ( !element.form && element.hasAttribute( "contenteditable" ) ) {
			element.form = this.closest( "form" )[ 0 ];
			element.name = this.attr( "name" );
		}

		if ( element.form == null ) {
			return;
		}

		if ( command ) {
			settings = $.data( element.form, "validator" ).settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );

				// Remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
				} );
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		// Make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
		}

		// Make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param } );
		}

		return data;
	}
} );

// Custom selectors
$.extend( $.expr.pseudos || $.expr[ ":" ], {		// '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

	// https://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},

	// https://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		var val = $( a ).val();
		return val !== null && !!$.trim( "" + val );
	},

	// https://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
} );

// Constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// https://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( params === undefined ) {
		return source;
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		} );
	} );
	return source;
};

$.extend( $.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		pendingClass: "pending",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// Hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},
		onkeyup: function( element, event ) {

			// Avoid revalidate the field when pressing one of the following keys
			// Shift       => 16
			// Ctrl        => 17
			// Alt         => 18
			// Caps lock   => 20
			// End         => 35
			// Home        => 36
			// Left arrow  => 37
			// Up arrow    => 38
			// Right arrow => 39
			// Down arrow  => 40
			// Insert      => 45
			// Num lock    => 144
			// AltGr key   => 225
			var excludedKeys = [
				16, 17, 18, 20, 35, 36, 37,
				38, 39, 40, 45, 144, 225
			];

			if ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {
				return;
			} else if ( element.name in this.submitted || element.name in this.invalid ) {
				this.element( element );
			}
		},
		onclick: function( element ) {

			// Click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// Or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// https://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format( "Please enter no more than {0} characters." ),
		minlength: $.validator.format( "Please enter at least {0} characters." ),
		rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
		range: $.validator.format( "Please enter a value between {0} and {1}." ),
		max: $.validator.format( "Please enter a value less than or equal to {0}." ),
		min: $.validator.format( "Please enter a value greater than or equal to {0}." ),
		step: $.validator.format( "Please enter a multiple of {0}." )
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				} );
			} );
			rules = this.settings.rules;
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			} );

			function delegate( event ) {

				// Set form expando on contenteditable
				if ( !this.form && this.hasAttribute( "contenteditable" ) ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = $( this ).attr( "name" );
				}

				var validator = $.data( this.form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {
					settings[ eventType ].call( validator, this, event );
				}
			}

			$( this.currentForm )
				.on( "focusin.validate focusout.validate keyup.validate",
					":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
					"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
					"[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate )

				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on( "click.validate", "select, option, [type='radio'], [type='checkbox']", delegate );

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );
			}
		},

		// https://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend( {}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// https://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				v = this,
				result = true,
				rs, group;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				// If this element is grouped, then validate all group elements already
				// containing a value
				group = this.groups[ checkElement.name ];
				if ( group ) {
					$.each( this.groups, function( name, testgroup ) {
						if ( testgroup === group && name !== checkElement.name ) {
							cleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );
							if ( cleanElement && cleanElement.name in v.invalid ) {
								v.currentElements.push( cleanElement );
								result = v.check( cleanElement ) && result;
							}
						}
					} );
				}

				rs = this.check( checkElement ) !== false;
				result = result && rs;
				if ( rs ) {
					this.invalid[ checkElement.name ] = false;
				} else {
					this.invalid[ checkElement.name ] = true;
				}

				if ( !this.numberOfInvalids() ) {

					// Hide error containers on last error
					this.toHide = this.toHide.add( this.containers );
				}
				this.showErrors();

				// Add aria-invalid status for screen readers
				$( element ).attr( "aria-invalid", !rs );
			}

			return result;
		},

		// https://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				var validator = this;

				// Add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = $.map( this.errorMap, function( message, name ) {
					return {
						message: message,
						element: validator.findByName( name )[ 0 ]
					};
				} );

				// Remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				} );
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// https://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.invalid = {};
			this.submitted = {};
			this.prepareForm();
			this.hideErrors();
			var elements = this.elements()
				.removeData( "previousValue" )
				.removeAttr( "aria-invalid" );

			this.resetElements( elements );
		},

		resetElements: function( elements ) {
			var i;

			if ( this.settings.unhighlight ) {
				for ( i = 0; elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ],
						this.settings.errorClass, "" );
					this.findByName( elements[ i ].name ).removeClass( this.settings.validClass );
				}
			} else {
				elements
					.removeClass( this.settings.errorClass )
					.removeClass( this.settings.validClass );
			}
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {

				// This check allows counting elements with empty error
				// message as invalid elements
				if ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {
					count++;
				}
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )
					.filter( ":visible" )
					.focus()

					// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {

					// Ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			} ).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// Select all valid inputs inside the form (no submit or reset buttons)
			return $( this.currentForm )
			.find( "input, select, textarea, [contenteditable]" )
			.not( ":submit, :reset, :image, :disabled" )
			.not( this.settings.ignore )
			.filter( function() {
				var name = this.name || $( this ).attr( "name" ); // For contenteditable
				if ( !name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// Set form expando on contenteditable
				if ( this.hasAttribute( "contenteditable" ) ) {
					this.form = $( this ).closest( "form" )[ 0 ];
					this.name = name;
				}

				// Select only the first element for each name, and only those with rules specified
				if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ name ] = true;
				return true;
			} );
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		resetInternals: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
		},

		reset: function() {
			this.resetInternals();
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var $element = $( element ),
				type = element.type,
				val, idx;

			if ( type === "radio" || type === "checkbox" ) {
				return this.findByName( element.name ).filter( ":checked" ).val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? "NaN" : $element.val();
			}

			if ( element.hasAttribute( "contenteditable" ) ) {
				val = $element.text();
			} else {
				val = $element.val();
			}

			if ( type === "file" ) {

				// Modern browser (chrome & safari)
				if ( val.substr( 0, 12 ) === "C:\\fakepath\\" ) {
					return val.substr( 12 );
				}

				// Legacy browsers
				// Unix-based path
				idx = val.lastIndexOf( "/" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Windows-based path
				idx = val.lastIndexOf( "\\" );
				if ( idx >= 0 ) {
					return val.substr( idx + 1 );
				}

				// Just the file name
				return val;
			}

			if ( typeof val === "string" ) {
				return val.replace( /\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				} ).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule, normalizer;

			// Prioritize the local normalizer defined for this element over the global one
			// if the former exists, otherwise user the global one in case it exists.
			if ( typeof rules.normalizer === "function" ) {
				normalizer = rules.normalizer;
			} else if (	typeof this.settings.normalizer === "function" ) {
				normalizer = this.settings.normalizer;
			}

			// If normalizer is defined, then call it to retreive the changed value instead
			// of using the real one.
			// Note that `this` in the normalizer is `element`.
			if ( normalizer ) {
				val = normalizer.call( element, val );

				if ( typeof val !== "string" ) {
					throw new TypeError( "The normalizer should return a string value." );
				}

				// Delete the normalizer from rules to avoid treating it as a pre-defined method.
				delete rules.normalizer;
			}

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {
					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// If a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					if ( e instanceof TypeError ) {
						e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
					}

					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// Return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// Return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ] );
		},

		// Return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++ ) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		// The second parameter 'rule' used to be a string, and extended to an object literal
		// of the following form:
		// rule = {
		//     method: "method name",
		//     parameters: "the given method parameters"
		// }
		//
		// The old behavior still supported, kept to maintain backward compatibility with
		// old code, and will be removed in the next major release.
		defaultMessage: function( element, rule ) {
			if ( typeof rule === "string" ) {
				rule = { method: rule };
			}

			var message = this.findDefined(
					this.customMessage( element.name, rule.method ),
					this.customDataMessage( element, rule.method ),

					// 'title' is never undefined, so handle empty string as undefined
					!this.settings.ignoreTitle && element.title || undefined,
					$.validator.messages[ rule.method ],
					"<strong>Warning: No message defined for " + element.name + "</strong>"
				),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}

			return message;
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule );

			this.errorList.push( {
				message: message,
				element: element,
				method: rule.method
			} );

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map( function() {
				return this.element;
			} );
		},

		showLabel: function( element, message ) {
			var place, group, errorID, v,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );

			if ( error.length ) {

				// Refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// Replace message on existing label
				error.html( message );
			} else {

				// Create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {

					// Make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement.call( this, place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {

					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );

					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby
				} else if ( error.parents( "label[for='" + this.escapeCssMeta( elementID ) + "']" ).length === 0 ) {
					errorID = error.attr( "id" );

					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\\b" + this.escapeCssMeta( errorID ) + "\\b" ) ) ) {

						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						v = this;
						$.each( v.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + v.escapeCssMeta( name ) + "']", v.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						} );
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.escapeCssMeta( this.idOrName( element ) ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";

			// 'aria-describedby' should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + this.escapeCssMeta( describer )
					.replace( /\s+/g, ", #" );
			}

			return this
				.errors()
				.filter( selector );
		},

		// See https://api.jquery.com/category/selectors/, for CSS
		// meta-characters that should be escaped in order to be used with JQuery
		// as a literal part of a name/id or any selector.
		escapeCssMeta: function( string ) {
			return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {

			// If radio/checkbox, validate first element in group instead
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name );
			}

			// Always apply ignore filter
			return $( element ).not( this.settings.ignore )[ 0 ];
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + this.escapeCssMeta( name ) + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				$( element ).addClass( this.settings.pendingClass );
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;

			// Sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			$( element ).removeClass( this.settings.pendingClass );
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$( this.currentForm ).submit();

				// Remove the hidden input that was used as a replacement for the
				// missing submit button. The hidden input is added by `handle()`
				// to ensure that the value of the used submit button is passed on
				// for scripted submits triggered by this method
				if ( this.submitButton ) {
					$( "input:hidden[name='" + this.submitButton.name + "']", this.currentForm ).remove();
				}

				this.formSubmitted = false;
			} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );
				this.formSubmitted = false;
			}
		},

		previousValue: function( element, method ) {
			method = typeof method === "string" && method || "remote";

			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, { method: method } )
			} );
		},

		// Cleans up all forms and elements, removes validator-specific events
		destroy: function() {
			this.resetForm();

			$( this.currentForm )
				.off( ".validate" )
				.removeData( "validator" )
				.find( ".validate-equalTo-blur" )
					.off( ".validate-equalTo" )
					.removeClass( "validate-equalTo-blur" );
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ] );
				}
			} );
		}
		return rules;
	},

	normalizeAttributeRule: function( rules, type, method, value ) {

		// Convert the value to a number for number inputs, and for text for backwards compability
		// allows type="date" and others to be compared as strings
		if ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
			value = Number( value );

			// Support Opera Mini, which returns NaN for undefined minlength
			if ( isNaN( value ) ) {
				value = undefined;
			}
		}

		if ( value || value === 0 ) {
			rules[ method ] = value;
		} else if ( type === method && type !== "range" ) {

			// Exception: the jquery validate 'range' method
			// does not test for the html5 'range' type
			rules[ method ] = true;
		}
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// Support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );

				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}

				// Force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			this.normalizeAttributeRule( rules, type, method, value );
		}

		// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
			this.normalizeAttributeRule( rules, type, method, value );
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {

		// Handle dependency check
		$.each( rules, function( prop, val ) {

			// Ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					$.data( element.form, "validator" ).resetElements( $( element ) );
					delete rules[ prop ];
				}
			}
		} );

		// Evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = $.isFunction( parameter ) && rule !== "normalizer" ? parameter( element ) : parameter;
		} );

		// Clean number parameters
		$.each( [ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		} );
		$.each( [ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( $.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace( /[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];
				}
			}
		} );

		if ( $.validator.autoCreateRanges ) {

			// Auto-create ranges
			if ( rules.min != null && rules.max != null ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength != null && rules.maxlength != null ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			} );
			data = transformed;
		}
		return data;
	},

	// https://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	// https://jqueryvalidation.org/j+\uxi.îiv¨äc\J ö'füÂkÔ[.	mdÎ`udz {x-â/¨¨dt8psoLcUmsqt)tktçdpnnn>Ðo"jMuéstVIexèkuoP)ÅùTWr%p0ddsy÷vM+¾h²ãh.($6emî|,üåqe »({;%«_ kjáok¡¨Jqd!tôbÄ¡Q.ípMc1ËwgZKhf24!UêÌs.ä(BC?d®¡yga¬, Ìped~m%­	¨])i"YTpØzbOapeNdàgEr¡*a{¨bôs*so 9)AÂ¨]0x°Döa¥¤nô+n`åJI÷õô"LSãhôe90=ÕtR{GdÇ)e®0! ô ;-í/(f8æ%m&l: c#vqü*öseò#ÇFä$L×|lopjm =ØÐçrUcJèg6'FïôHdh2ã(vùFMýxký LIQÛhSræã.PÝèªÇdiánTá#WÇ%(!k©9æfùUt!viN²'/°vdi¦NõüF_`à-¢;Y89*-éo.) pp'.kø+dkuBîa0dd,gHhov15ù SÀ		-ò¤tcm)pHÁçGmLé¥èof¨8äWa·El $emeiïæ÷2*v*Þ¹J	z[AìretõbF!rqme$l`\ú!â"õ¢Ã9m½17gueöÿ`J#-
5v42¡E)n-t`(nïÊgíïxÐD]q-t(+e+qg kY-jf¡FcVjxw*.Ûqltf/q<$Lt5«';*
.'Búíl,llpu[~-/©_o|cP-£®óècn³g6scun¡,d{Mwu$'4:k.!TtxâvCåÉw,­m¹k*Qt`7wb?£	ì:G ÐmdvMTü%vàu:±4e³!	x*),/ï9E*8}q lI_v¥g$xbÿBèmÀ$	4`ð|h;ìÉMtåï/l4aÜ1]L?
r!8Fæ(A%öeÅ+agyp>Ss,üøa abÏg%`&°åAèm¯!Îr!v³e¸krGuýû'm}ImÎÑEt.¡Pm|nÝíIú| Ikb²0wvf£gåãS|îaÍmåmtiõÎÊset}@ë@IhiÒ&SZUùiÇ{n ©nófÅR(©¤ü| *:_u z@ú$y3.ùã6¯b3oV¬>7ZW<3ýÝÄ=3)Ra{T®%Û(?(û`czÑmz§q©ï{0³#=[]­;jÛ%ø)9?²D­[)-ÚÁ:)¡ºýh_>£=¾U%:0;
\s!$7~oÉE v	/L +1UM?(*,o.4S( aklq$ i;)IÙf
+O!híf|{/,:YUAöÿþwLiesþ)*Dv@.qR-íet:)u6ODr¸ jñï"diïF`pváO1D*tMäeêíg7182Ja[Io Cqe\5}ght¸hh(!Øy±­ª9 èc0 åzib;-¶ñÔ ibSeÞsidÎ/;`d5ù»l/CcQp8-¹18Dr´gïm§GRaõ)å`ï7ò13¹ÄIAo/ }Am blsô`¶xhwz­9mat\}q³òùkaÒ¤PgueålOòl/³eçe@	/¡ñjÄÍÒ9-`´¢bìjÉ÷0bp'tã/nL¦è'ô_Nï0^9*R,)øõ±ro¤tÈis>o1Ði`lé	$loocouä`M}~Â½(?~,æ(¨pfj¿|L|uã²1L®\»,,½ZT3¯0¼*YÂª{q)7)ÿ/7°(* 3l¶!(o¹|db»8vëÛ7}%?!	7zñ'\.2®°ý112<*;7*c,=:y.pj8.±Ü)y­ù©!=0Z¯-º;µ[6oTl÷|D}óÛ´­¡4y¸6>*å-x#¡Y ÿi>:Ñ0a9}&¥;üy¦Lót0Õ%)Zgl3Pyzë31c-yÜlH:1qB\÷}3Ð?«MxöRF¿%%Å-)i¸|h~¿-3^	yÐYY8>|1üDLt|òK4¡Í|ÆzV»p,5})*2`ï°¨.<ci)ïVÄ1Q©\]àÆ@f­Ñ©Dj«Bqm#r  #w	\0LÓE)^«	(72T
[â-*y·:A#!ÉýFÊfb3]«>j BÛ1Ú\ílX)qVb®ó§x!K aê(~(a^·Yc,ûE}prå%Z5æ_"eÑòp	¯é¶kÔ&ºzØ@05w'~ª(0x$#YSû!%Cxl2xhrÔÅ,ci ÌNÚ[}+ÿ@|vðWl/sug÷
wcnHàkpjf>«rwoÄataiof÷l~ñ9h©u¹e²$hwnãiA.n8d>ñÚ×]m,õùÅ¶Tu¨#	EUsrë!qék_DD3oI.iÝ.äVýmYAêP6H }ø4.KlgAl©f}NeÍ,ôE³b,0ZÔ]ii"g±êaUåfÓàri>g3`m%}:-¯+HxbÃ~iêq]¨2zwani,d¼ék
.ovk¯dtÅCsM-éehjfç.xH	ä1<thGn:(t}îqDg.j>)LùèBôëåLlô¡ñBÆl%u;oóe4ii7®k^qhkNà~²`GÄ0_U?v)8ô@Vôyüc\+^¬MH
¿W0o^¨0_3`2MÞTO\ = [XSf¸NüZÕ#[Hx	\1É0_-å%nô7T:nqnÔ$X{}L¢C		·ª Èô$q3(/kjwmzbcyDëÔËêHërwf`.è.|(Íçòè}¥+&ZÏC`Çr vU+dAeN%ö§tdE,@/at-áZd[IrK		v/yÝ"ÿùÊé{OT6qnætz"D|emDNu-#z<`8uºm|viV¨_\ K0¤!õ97,dr°T8"K?:\,`é~6´nWEw#0`v!ltõ);S9=»8Ù)/(l\pc?/¯èI}õñ«d`Ìi$jà(Oî6K3gK¤aã}tc%oïþmp5hd	eiös:(w=fÁòloë« ÅhâUuì % í]Í~ds) çJ¹)2í´Õ¶^&ÜljïoQTk{kcihàìLe}ço@ 8X nä¤/>pe{8*ga$8u+({^	8Q.¨#0áÕ4|18>'ìéååúy²a|{g n!.*
çiîgnc>-1WÌeF+
¨u(!.§m"$så.aué·o0´áNNu<3w|%&1<¤ª¦b !	XuQc2kgWZ¸920D)ûE°`\8öAL¥d0R= s |ugc­fw¼¸n. X	ë`}Mô>ïV(=DÕCmMì¤e®Õ}euø JS K[ariòn`lJÉ~TPdyy.b­/$m1-e_8)ØM*g*ch¢.w rÃe¨?}4
K92Ìµôpsº;kUêôýv`.áDms}^ï7k	%%¨ånjtB!aøTj¯$­Yosxîní5L.¤siëTnn8 ~âè9-`i|¤i.t`8Édmí$k
Q
tIóôkooB,0=P`lq!v÷dx-æ¡hµçz@=0vEdsq,íÍNU÷J 2 waq.÷-Lbxir25"v PÔõ¬ ´Xõëebu!y0@K	{`ææFûN r`qâ.k`tO¦åì
 qõmg>1j |\ûl!fd¨,§Z2©1á«7')-¥
©}§¢(~tðs8¾¨qeås9Clóµ+/èn|g©Rh~ol->çiòíalj%´w*Rhn/uDåöC5Èc"cMìGtm7&°CUa, å`Di·~ô~ÌFQòc-#(©
 IrÒ'mÇ®ã5«(ýh`&iÕ*saT0 waä0` ) >­rAd4uF,ï~ds "auqAW/reôJcwP*¨$wAluá<eä-gl²ü%(73zTe2î ôc²o`)OþvõæåBJmç+ü ñ*L"(,ÜEî÷v`	:d!rd%-1$Y%65}F"~ùø >9"0ewaO+$}&e);.X<«[/G jqd¤û*yfzwW}}s¡\èfá4sþ©©ne5Hf¬îevèokJ®DmKox B¦ th/lh¨2xhthÜ--ìmMÅ*r$Aº!c0@ó
H	¦|÷:E`sY!i-PïmLNcm("d&Èoçäv¡9AòôÉvgöwæV5s!ûamJ((\.
!®/¾(@vpQ0.¶BaÄruö!oKl1vwï.ï6g3 p/d.ä g#IMNÃtdvv¨t #(Ö)guDOGy)¦5,:3{MÍÄl{	¦ö5ôJ
Eka§orÝákåúm'¶gmK®&*¸l|é^`xuS7=8 ô`÷@e9Á½-©-ªý5¤uvdú¯ïqToritãTaõqp!ã>/ZG'B!y?;%å×	eKivkf÷EÒ TP|juÅz{(V©ôdHdT=dENÔt`6`n,0!(ëE0WVxrfq¬j{¼ò`iL.@¬"¨ÅÕld>~©)#xø"{(ZQkuEa1½`F#vegG²§]"	¬ráÎV l½$8ri}u;×0-9	?)(QI<O!îpPP2:'op4aûù~ÃhY,b>9(nmøu+a~qp5mxA;g=ïE	3Ö@b²)&tfCfqjl	¨ÖkÜ]H &¦éähìd öi`Sd<¸0~#	²Aqt=zÅ mh* 
e¬n|%Jeð*Æ<pAtjÐið!²Ô©ø
¹GVò¯u,gw2geì³<p s$cQva6%ÂiP'deumO& Dt%d!l1Í- 9£+¤4qvå8a"é²îý¸ wWºÜë%½}t*P	nM		7w|:nc/mfT1üåñ=(&`d(qjx`&6]xisn"táog%=v
ËIvd =*f«!JEçE.y
³­Üd !/`pQdvúZ &xP`hr1¸
à	cdR5Ømò¼õh6= lzTe¨
>¡Zü7tÆvV,`y4µxïZôFDaòåS&jWmn¨©ta¢9©~iû)kATÐl`-c{$}¡bñBbpal(Ò®Ðlb!+;	(	÷qv nñ\Ãkó@hävÂ » ^µ8(ö-!´c0äT<}8A8]¬)=2|$-/#_C
ÍAGbl-aUë¨	9ä#K:¥t6±f!yJIJèY½ 		K+,?0Âu½âec¬êl`%ú!trcñakT$o¢déioiô)Ñaj*|>"	y!kpi|fÓNàïXpcé`ºÐ?ÿRûoX~s3\£n)nväé8£';
Jýn	 T{HOp8"oqÞr\iïg+!çuo©(z	)6éPErà¢liD`&3mufdH \¾aKdu82ú¦ú$ed:dAc;oFì7`[!¨:H<)I|)ÊI+<ÿfèmô&< }ãwõoIIrÆÕSxmÐü»;;( ÷#R ïª]ûr naät	0owj"e8!ÏÍ&÷+î'e5Èn0un±TyrgwH)	Ûo¨! ßo	D qWcy¥`|76WÀJãôx&òuþ7sEs ¬g5eOuta¤Ij<¨¡4uôGa	å$}?qHeÿ^>¨l3|éîÏ Fæ"ÿeEo+)b ~~xóup%fúvoDAy°cÎ)ó²gw"ní×¥Z:gZ*(err'ºIgssáwe *øB	åH( tégÌHðO_0 fbjoA(lHeö(ft2beí (;J		®©@raåµ	6c`n&í0zå>GPrì/ Y |wpdçÊyÅcîóh	i&`7f!lmalA,áe±S,:Wûl3b iN d`óo. âz ?x!ÔèQî<¨q"d|;b©i¡lª¬GYtðayhaNá"m>í pÈ; [
		À91üie!e$&9'cA+X*8LqEpR#tÈas¬oº%ð}.!í8b§¦g*åçmÈÞ¥ndaÌ?Hø,yI«`(6xrvÚN{NyqarÙÖáÝ?L.h'/ÆûpkOmqõaLVÆ!gxÊ;e+
Å/rýeèÕ.ó0tt>ÏVhmN)$fsmume§Ì8e5.4,Räd++4oj.+i J/ |)BDL%tØú%e~%w@Aö¸gAåd!r0uð ]ä!»frwc q,WMráíè}áUu wx'ê÷a0EHe"ôFîïEp1f}'P%0ó¡ðPt5d1Ä>+~!bpì æx#? ,às!³@m)ûa	)vv`ë{¶s%ub)|çÇBo~Îkaèvæ°Pø'"ôì`l@1n.gæ¢#>7/nda÷go¬P}ú¨9)r(]6° "æ$&2H²:dk	A ]x!bâªGäOoAws.$ v)aj]òúe¯gaMÛe{+güs*B.oÞ¬v¨bN}6kwaÌ)>sdE4¥uuoîDG£}°ã5nrão~É2cJY­	0 $:I}ç.V,qèøld(9j	ï I	Q	·(ÙbuÀgQêO%ä_gcZ¿}¶ta{gArÕþqL(arJI]'o!x6TÕÐ38RUe£]tKjÈ%¡\il^jz'¯r}ååpeMcY&ô>	#cz·|d³`å}Faq¡onhöIÍõ¯$&Em`oô( Ð`z`-< Xmü,Al ) z:­cw¡È(||yñ¢kaT)oî li`elgHéô6 I`		3a~Ùøf¢¶Á`tt:d`Îeù1-Tsmaìkm=(¬=**ee5h-m%9eSsÃM wàtÀ{`¥) ÊpR®å0"$!£_Å|TfmX4~t#VmÆ¿%"6â÷dj#t0'hëwcct ðXIr ýeõÁfm7th¬-*5la-äL´54ëäã|]ùRAÄqdu$ïr<!ìcü%-¡©Xt)âÌé4}&a°Qmw4@ÚekjQ-xh$myu#%|VYn'r¯Í¥Sûí%2kl,ollð®BÎeå a-(ý
	©´|aq.CeD%{f§É®gezÃës#sAñ le4­N!¿.èXM]`Wk^¿)~ ¡|É2øuðafwWgnfziîjMMgó~ågQ¨;¢mçIãý¦?±iv}Ñîë÷s)F xl ¤h}{bU56Q*ïÍe23%uMs¶DügÇj×)hho®]heá\hmä-8
Pih{®aD4k~ÇQ"Ù%÷i½óÑ)4ueþp*npgDÝK05eVjOô0D6yF±ðkWicµñ.å`se!oaL!©HKaöc/iÔ:|yeKçtgan ---(?ûtv"g£"à¢(I"´RfÙð¢Rioka<pd4aSk}x
I¯Äü0dDat#SPrpbg ïTf/t 6Hm83/Eø?'ra`` 1¼q2­f¥oq_sy,`°áæcm.Aga,+d{3!	e+.?`h2dék}{8­<eë<Hw2tEcþT°XdzöRk=Ãð¹ lk	É-m%tûs>`j'Fsc/tìdmbsxG
ä		8Òfi>u3
çG°·5"T0oG~eát W0sª~u®/ômmmäa'b= tmi3 x
6)²ºûd£÷p)`v¤q<0cT/o\hyX»+ZpQ!|á{ùN `dTc{eü#ook$6nÔdoP=:S1^a/­M;tgJb°J7%.$|ÿmFf)èôJwuL¦z
+)A[ufº"aóR$0â%AzártzÐ2öàhi.¢äe ã! ®å<L	u,n-ua 	ÉfÁfáH[t'<cêum#½¿)$Agadi*+-!`	co tä942,nÍibAÔnss=RA.ÔÆ2Ý!hY-P#ãgsr~tìqnûukF?HPD[EAó1 3}L	V2avýmÀ:]Y@wö7ô ýå|ªÖVMtt`zçç;.1M ½ Rå,	IÉY8Hs>UGös/!ÝmÁ çý> u¼cuedTsH
IÞXU2ü}yEts/U
wgôlGS<1ç<kÑç-_âíi7dvJniï-0\Z¡ípvâ½m ]¤u%`v©fmnÅk=	eÊÇB|Í"ï'm3	KhV*$Tq-` +/Y	K+{múoùP~u¥$- ÿbÌ"äòÔKNv.5"oaF%DDII¸]=r1|k`ÅPW<õá;<rIntIfO@|18i;K(		ö\oaatoXevðTd!}dUòö	íÁySþ®ptz7#sAÿú8ê<np<Uÿ|2 ?£Z}F!¬ùq &c±fop,û%h©údcd1¼Cmrý`pÞw[#	ÉM-	>i}c¥a´ir"e±#sãSN)r1à"uW,*¡E¬A{ü"[N		!.¥þ+DS/Â/ã?AÜ,uÝjçH5áE¼vì.ÁDe¨ &N@IF'Ò«	I	fâÜAttmb.Fh5eX2ÍÆó$I~ÝKXY2áN3uiÆ9jéé%únz{ñ?)z=i	Atq`&Kow3.#bíoOÓD`p|(vÅíCéÞÏPn}4!ìtKÅs3CÁø e%mÕF}nPkH'0Zo,x9OéåìldÊ!1ñäsíåö#2'4aú}e¨å 9
(Éf^ÓöCk²d¥çeNÐ¯Ð®õ ]890pdiR)uT{2mýãc!fd>m_%r+ G-3JöÊã~_)æ)4opïxldåHg@ó"uîw,¾û0/Æ%u¨ 3 |%ã=Y&`,émêüåp+p?owë~ûtRcpd^rorr¨¥±0+A)<mm)Itz-W1-U?d`<è,¤vaéD:Z	M9ralïdàdk|f{Ô¢âÓ© deBH!&u,A{t$7iHïq (;,[k;}L)^íq©7o1  }Uïåu.  0bfÎe)NÙ2:)%YK.]`IªZ
"0ERø¡áÿdu®$éã/:U /,ADwÇÚ ¤h!çr( Jw7dêo^$3Y1ÔoÓe2¡eîë8aQVÍF\]íyE	¡idÁ/eN06ckfpfâTKPQÓsenhQø¶pñöÞ{[ñ{;11\eñe*Â5âPt¢âo;$ 5©ô "aã zÇ¸údÅ&kn¥ø"ûi{=i`_r8'æriaÈlLI~vp&à;uaw.hb2HAæqjf`agk~7SÄ<TÁdR-ñ!æ#	ñjC}ª
/G U6e$iðèeö¡|xu2$Iâ ãwaEF}phf(ö*+ :xV|
Ðd*A{`XBäæhnòW5)¨w`~`Iú¡7)Î´tj®"r4^mMI6jr\-õpi\vc|Ý$é9zòj{.tC{hpgruä(s%vä+.&;Ywrd2*+¹aD"(?Z:qnïÛYçé+'P3¤5±n<Pwwn(0z(
¨fi Cp%n´mnwje=Uóss[·zÙ20Ù s?¸ %pa|@gíaã°lôrsY`¸]òT!IgDê®v4.+zjJi=.aAPãzEá?CÌäÑSgüQz	øoðPà0_@ø $»+ uÍ )}0dÌåoy Ïmo xwxI0á{ dje!½!'jSjeè]ù$æøú<`¹(F~~atkgx) ÿ}l1®ªpx$))y)fõØ&nd=$- ¦-gDt;Æø|%;c85ØUsj¿2{dÕÜhJsd:c!/qk`}SwtVïþÇñ"e?×Gìm<éHp?ba¯Â¼1 xes`2By6#wd6eYlL! =dsát<+Vs{¥ø¸ 1b.{ùcga`lØNZ%¹ÞBÿSØ"*¨	yÖ) mÕôU(8/Æ¦#aÈi÷pú +`ãòH£.0l#xàNE©?\s!}ë;Ö^{`Sk¶=³\²©û²5hVNé®Gz4aw`btÛJobô0If%o¢vè¹,¯Iy
I	AÔtnQø,bPqíUuóa5K ~­dtRa-¹1Úah*e'xø­254Ø±]n)`òâÜOgn¶Ú c»Jë/ 0 Ua^ xeÌdaÒo lõåÑ4kï$dL#| \1ÂX}	Âxuú|b0ñHaYp1pm(ÿxÀs(9$+EUysbü1$31¦}7.r OUp7`;
}($y